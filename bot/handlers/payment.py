from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
import logging
from bot.services.payment_service import PaymentService
from bot.keyboards.subscription_kb import get_tariffs_info, get_tariffs_keyboard
from sqlalchemy import select
from bot.models.user import User
from bot.utils.db import async_session
from bot.services.payment_service import DEFAULT_EMAIL

router = Router()
logger = logging.getLogger(__name__)

class ContactState(StatesGroup):
    waiting_for_contact = State()
    tariff_selected = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
@router.callback_query(lambda c: c.data.startswith("tariff_"))
async def process_tariff_selection(callback: types.CallbackQuery, state: FSMContext):
    tariff_key = callback.data.replace("tariff_", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏ –µ–≥–æ email
    async with async_session() as session:
        user_query = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = user_query.scalar_one_or_none()
        
        if not user:
            logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –≤ –ë–î")
            user = User(
                tg_id=callback.from_user.id,
                username=callback.from_user.username or "none"
            )
            session.add(user)
            await session.commit()
            has_email = False
        else:
            has_email = bool(user.email)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    await state.update_data(selected_tariff=tariff_key)
    await state.set_state(ContactState.tariff_selected)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å email, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if has_email:
        await callback.message.edit_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π email: {user.email}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —á–µ–∫–∞ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π?",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {user.email}", callback_data="use_saved_email")],
                [types.InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π email", callback_data="new_email")],
                [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ —á–µ–∫–∞)", callback_data="skip_email")],
                [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_tariffs")],
            ])
        )
    else:
        # –ï—Å–ª–∏ email –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        await callback.message.edit_text(
            f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à email.\n\n"
            f"–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —á–µ–∫, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_email")],
                [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_tariffs")],
            ])
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await state.set_state(ContactState.waiting_for_contact)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ email
@router.callback_query(F.data == "use_saved_email", ContactState.tariff_selected)
async def use_saved_email(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ email
    async with async_session() as session:
        user_query = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = user_query.scalar_one_or_none()
        
        if not user or not user.email:
            # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π email.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_email")],
                    [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_tariffs")],
                ])
            )
            await state.set_state(ContactState.waiting_for_contact)
            await callback.answer()
            return
        
        email = user.email
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await create_payment_with_email(callback, state, email)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email
async def create_payment_with_email(callback_or_message, state, email):
    is_callback = isinstance(callback_or_message, types.CallbackQuery)
    message = callback_or_message.message if is_callback else callback_or_message
    user_id = callback_or_message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    user_data = await state.get_data()
    tariff_key = user_data.get("selected_tariff")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    try:
        payment_id, payment_url, markup = await PaymentService.create_payment(
            user_id=user_id,
            tariff_key=tariff_key,
            contact=email
        )
        
        if payment_id and payment_url and markup:
            text = (
                f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à —Ç–∞—Ä–∏—Ñ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
            
            if is_callback:
                await message.edit_text(text, reply_markup=markup)
            else:
                await message.answer(text, reply_markup=markup)
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            if is_callback:
                await message.edit_text(text)
            else:
                await message.answer(text)
    except ValueError as e:
        text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        
        if is_callback:
            await message.edit_text(text)
        else:
            await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        if is_callback:
            await message.edit_text(text)
        else:
            await message.answer(text)
    
    if is_callback:
        await callback_or_message.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ email
@router.callback_query(F.data == "new_email", ContactState.tariff_selected)
async def request_new_email(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π email –¥–ª—è —á–µ–∫–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_tariffs")],
        ])
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await state.set_state(ContactState.waiting_for_contact)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email
@router.message(ContactState.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    email = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_email")],
                [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_tariffs")],
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        user_query = await session.execute(
            select(User).where(User.tg_id == message.from_user.id)
        )
        user = user_query.scalar_one_or_none()
        
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.email = email
            await session.commit()
            logger.info(f"Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –æ–±–Ω–æ–≤–ª–µ–Ω: {email}")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å email
            user = User(
                tg_id=message.from_user.id,
                username=message.from_user.username or "none",
                email=email
            )
            session.add(user)
            await session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å email {email}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email
    await create_payment_with_email(message, state, email)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ email (–æ–±—â–∏–π –¥–ª—è –æ–±–æ–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π)
@router.callback_query(F.data == "skip_email")
async def skip_email(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with async_session() as session:
        user_query = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = user_query.scalar_one_or_none()
        
        if not user:
            logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –≤ –ë–î")
            user = User(
                tg_id=callback.from_user.id,
                username=callback.from_user.username or "none"
            )
            session.add(user)
            await session.commit()
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å –ø–æ—á—Ç–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await create_payment_with_email(callback, state, DEFAULT_EMAIL)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(lambda c: c.data.startswith("cancel_payment_"))
async def cancel_payment(callback: types.CallbackQuery):
    payment_id = callback.data.replace("cancel_payment_", "")
    
    try:
        success = await PaymentService.cancel_payment(payment_id)
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
                reply_markup=get_tariffs_keyboard()
            )
            logger.info(f"–ü–ª–∞—Ç—ë–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤
@router.callback_query(F.data == "back_to_tariffs")
async def back_to_tariffs(callback: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤
    await callback.message.edit_text(
        get_tariffs_info(),
        reply_markup=get_tariffs_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("test_success_"))
async def process_test_success(callback: types.CallbackQuery):
    payment_id = callback.data.replace("test_success_", "")
    
    try:
        success = await PaymentService.process_test_payment(payment_id)
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            await callback.message.edit_text(
                "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                "–í–∞—à —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=None
            )
            logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã YooKassa
@router.callback_query(lambda c: c.data.startswith("yookassa_success_"))
async def process_yookassa_success(callback: types.CallbackQuery):
    payment_id = callback.data.replace("yookassa_success_", "")
    
    try:
        success = await PaymentService.process_test_payment(payment_id)
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            await callback.message.edit_text(
                "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                "–í–∞—à —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=None
            )
            logger.info(f"–ü–ª–∞—Ç–µ–∂ YooKassa {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ YooKassa {payment_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
    
    await callback.answer()

def register_payment_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    dp.include_router(router) 