from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from sqlalchemy.future import select
from bot.utils.db import async_session
from bot.models.user import User
from bot.models.client import Client
from bot.models.plan import Plan
from bot.models.payment import Payment
from bot.models.promo import Promo
from bot.config import ADMIN_IDS
from sqlalchemy import func, desc
import math
import asyncio
import random
import string
from datetime import datetime, timedelta
from decimal import Decimal

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_message = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
class PromoStates(StatesGroup):
    waiting_for_code = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    waiting_for_discount = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–∫–∏–¥–∫–∏
    waiting_for_expiration = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    waiting_for_limit = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    waiting_for_confirmation = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_admin(message: types.Message) -> bool:
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return False
    return True

# –ö–æ–º–∞–Ω–¥–∞ /admin - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [types.InlineKeyboardButton(text="–ö–ª–∏–µ–Ω—Ç—ã VPN", callback_data="admin_clients")],
        [types.InlineKeyboardButton(text="–ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")],
        [types.InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")],
        [types.InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã", callback_data="admin_plans")],
        [types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]
    ])
    
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def paginate_results(query_func, page, page_size, callback):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        async with async_session() as session:
            total_count = await query_func(session, count=True)
            
            if total_count == 0:
                return "–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            total_pages = math.ceil(total_count / page_size)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page < 1:
                page = 1
            elif page > total_pages:
                page = total_pages
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            results = await query_func(session, page=page, page_size=page_size)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            text = callback(results)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if page > 1:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data=f"{query_func.__name__}_{page-1}"
                ))
            
            if page < total_pages:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", 
                    callback_data=f"{query_func.__name__}_{page+1}"
                ))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            info_text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages} (–≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count})"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
            keyboard.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")])
            
            return f"{text}\n\n{info_text}", types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
async def get_users(session, page=1, page_size=10, count=False):
    if count:
        result = await session.execute(select(func.count()).select_from(User))
        return result.scalar()
    
    result = await session.execute(
        select(User)
        .order_by(desc(User.created_at))
        .offset((page - 1) * page_size)
        .limit(page_size)
    )
    return result.scalars().all()

async def get_clients(session, page=1, page_size=10, count=False):
    if count:
        result = await session.execute(select(func.count()).select_from(Client))
        return result.scalar()
    
    result = await session.execute(
        select(Client, User)
        .join(User, Client.user_id == User.id)
        .order_by(desc(Client.expiry_time))
        .offset((page - 1) * page_size)
        .limit(page_size)
    )
    return result.all()

async def get_payments(session, page=1, page_size=10, count=False):
    if count:
        result = await session.execute(select(func.count()).select_from(Payment))
        return result.scalar()
    
    result = await session.execute(
        select(Payment, User)
        .join(User, Payment.user_id == User.id)
        .order_by(desc(Payment.created_at))
        .offset((page - 1) * page_size)
        .limit(page_size)
    )
    return result.all()

async def get_promos(session, page=1, page_size=10, count=False):
    if count:
        result = await session.execute(select(func.count()).select_from(Promo))
        return result.scalar()
    
    result = await session.execute(
        select(Promo)
        .order_by(desc(Promo.is_active), Promo.expiration_date)
        .offset((page - 1) * page_size)
        .limit(page_size)
    )
    return result.scalars().all()

async def get_plans(session, page=1, page_size=10, count=False):
    if count:
        result = await session.execute(select(func.count()).select_from(Plan))
        return result.scalar()
    
    result = await session.execute(
        select(Plan)
        .order_by(Plan.id)
        .offset((page - 1) * page_size)
        .limit(page_size)
    )
    return result.scalars().all()

# –§–æ—Ä–º–∞—Ç–µ—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def format_users(users):
    result = []
    for user in users:
        banned_status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if user.is_banned else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        ban_info = f" –¥–æ {user.banned_until.strftime('%d.%m.%Y %H:%M')}" if user.banned_until else ""
        result.append(
            f"üë§ <b>ID:</b> {user.id} | <b>TG ID:</b> {user.tg_id}\n"
            f"üë§ @{user.username}\n"
            f"üìß {user.email or '–ù–µ—Ç email'}\n"
            f"üìÖ {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"Status: {banned_status}{ban_info}\n"
        )
    
    return "\n".join(result) if result else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

def format_clients(clients):
    result = []
    for client, user in clients:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if client.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        expiry = client.expiry_time.strftime('%d.%m.%Y %H:%M') if client.expiry_time else "–ù–µ—Ç —Å—Ä–æ–∫–∞"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        traffic = client.total_traffic
        if traffic is None:
            traffic_str = "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"
        else:
            if traffic >= 1024**3:
                traffic_str = f"{traffic/1024**3:.2f} GB"
            elif traffic >= 1024**2:
                traffic_str = f"{traffic/1024**2:.2f} MB"
            else:
                traffic_str = f"{traffic} B"
        
        result.append(
            f"üîë <b>ID:</b> {client.id} | <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.tg_id} (@{user.username})\n"
            f"üìß {client.email or '–ù–µ—Ç email'}\n"
            f"üíæ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_str}\n"
            f"üñ• –õ–∏–º–∏—Ç IP: {client.limit_ip}\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry}\n"
            f"Status: {status}\n"
        )
    
    return "\n".join(result) if result else "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤."

def format_payments(payments):
    result = []
    for payment, user in payments:
        result.append(
            f"üí∞ <b>ID:</b> {payment.id} | <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.tg_id} (@{user.username})\n"
            f"üí∏ –°—É–º–º–∞: {payment.amount} ‚ÇΩ\n"
            f"Status: {payment.status}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìÖ –û–ø–ª–∞—á–µ–Ω: {payment.paid_at.strftime('%d.%m.%Y %H:%M') if payment.paid_at else '–ù–µ –æ–ø–ª–∞—á–µ–Ω'}\n"
        )
    
    return "\n".join(result) if result else "–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π."

def format_promos(promos):
    result = []
    buttons = []
    
    for promo in promos:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if promo.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        expiry = promo.expiration_date.strftime('%d.%m.%Y %H:%M') if promo.expiration_date else "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
        
        result.append(
            f"üéü <b>ID:</b> {promo.id} | <b>–ö–æ–¥:</b> <code>{promo.code}</code>\n"
            f"üíπ –°–∫–∏–¥–∫–∞: {float(promo.discount)}%\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {promo.used_count}/{promo.usage_limit or '‚àû'}\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry}\n"
            f"Status: {status}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        if promo.is_active:
            buttons.append([types.InlineKeyboardButton(
                text=f"‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {promo.code}",
                callback_data=f"delete_promo_{promo.id}"
            )])
    
    return "\n".join(result) if result else "–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."

def format_plans(plans):
    result = []
    for plan in plans:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        traffic = plan.traffic_limit
        if traffic is None:
            traffic_str = "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"
        else:
            if traffic >= 1024**3:
                traffic_str = f"{traffic/1024**3:.2f} GB"
            elif traffic >= 1024**2:
                traffic_str = f"{traffic/1024**2:.2f} MB"
            else:
                traffic_str = f"{traffic} B"
        
        result.append(
            f"üìã <b>ID:</b> {plan.id} | <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {plan.title}\n"
            f"üíæ –¢—Ä–∞—Ñ–∏–∫: {traffic_str}\n"
            f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan.duration_days} –¥–Ω–µ–π\n"
            f"üí∞ –¶–µ–Ω–∞: {plan.price} ‚ÇΩ\n"
        )
    
    return "\n".join(result) if result else "–ù–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(lambda c: c.data == "admin_users")
async def process_admin_users(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    text, markup = await paginate_results(get_users, 1, 5, format_users)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_clients")
async def process_admin_clients(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    text, markup = await paginate_results(get_clients, 1, 5, format_clients)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_payments")
async def process_admin_payments(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    text, markup = await paginate_results(get_payments, 1, 5, format_payments)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_promos")
async def process_admin_promos(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")]
    ])
    
    text, markup = await paginate_results(get_promos, 1, 5, format_promos)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    if markup:
        markup.inline_keyboard.insert(0, [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo")])
    else:
        markup = keyboard
    
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_plans")
async def process_admin_plans(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    text, markup = await paginate_results(get_plans, 1, 5, format_plans)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(lambda c: c.data.startswith("get_users_"))
async def paginate_users(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    page = int(callback.data.split("_")[-1])
    text, markup = await paginate_results(get_users, page, 5, format_users)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("get_clients_"))
async def paginate_clients(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    page = int(callback.data.split("_")[-1])
    text, markup = await paginate_results(get_clients, page, 5, format_clients)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("get_payments_"))
async def paginate_payments(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    page = int(callback.data.split("_")[-1])
    text, markup = await paginate_results(get_payments, page, 5, format_payments)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("get_promos_"))
async def paginate_promos(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    page = int(callback.data.split("_")[-1])
    text, markup = await paginate_results(get_promos, page, 5, format_promos)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("get_plans_"))
async def paginate_plans(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    page = int(callback.data.split("_")[-1])
    text, markup = await paginate_results(get_plans, page, 5, format_plans)
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(lambda c: c.data == "admin_back")
async def back_to_admin_menu(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [types.InlineKeyboardButton(text="–ö–ª–∏–µ–Ω—Ç—ã VPN", callback_data="admin_clients")],
        [types.InlineKeyboardButton(text="–ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")],
        [types.InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")],
        [types.InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã", callback_data="admin_plans")],
        [types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]
    ])
    
    await callback.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(lambda c: c.data == "admin_broadcast")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.set_state(BroadcastStates.waiting_for_message)
    await callback.message.edit_text(
        "üì£ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_broadcast")]
        ])
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_cancel_broadcast", BroadcastStates.waiting_for_message)
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await state.clear()
    await callback.message.edit_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback.answer()

@router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    
    broadcast_text = message.text
    if not broadcast_text:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await message.answer(
        f"üì® –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{broadcast_text}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="admin_confirm_broadcast")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_broadcast")]
        ]),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(broadcast_text=broadcast_text)

@router.callback_query(lambda c: c.data == "admin_confirm_broadcast", BroadcastStates.waiting_for_message)
async def confirm_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_data = await state.get_data()
    broadcast_text = user_data.get("broadcast_text", "")
    
    if not broadcast_text:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()
    
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.edit_text(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_users = len(users)
    successful = 0
    failed = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user in users:
        try:
            await callback.bot.send_message(user.tg_id, broadcast_text, parse_mode="HTML")
            successful += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")
            failed += 1
    
    # –û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
        f"- –û—à–∏–±–æ–∫: {failed}",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
def generate_promo_code(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä"""
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.callback_query(lambda c: c.data == "admin_create_promo")
async def start_create_promo(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_code = generate_promo_code()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_code=promo_code)
    
    await callback.message.edit_text(
        f"üéü –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
        f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫–æ–¥: <code>{promo_code}</code>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π':",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {promo_code}", callback_data="use_suggested_code")],
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_promos")]
        ]),
        parse_mode="HTML"
    )
    
    await state.set_state(PromoStates.waiting_for_code)
    await callback.answer()

@router.callback_query(lambda c: c.data == "use_suggested_code", PromoStates.waiting_for_code)
async def use_suggested_code(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    promo_code = user_data.get("promo_code", generate_promo_code())
    
    await ask_for_discount(callback.message, state, promo_code)
    await callback.answer()

@router.message(PromoStates.waiting_for_code)
async def process_promo_code(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥
    promo_code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
    async with async_session() as session:
        result = await session.execute(select(Promo).where(Promo.code == promo_code))
        existing_promo = result.scalar_one_or_none()
        
        if existing_promo:
            await message.answer(
                f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.",
                parse_mode="HTML"
            )
            return
    
    await ask_for_discount(message, state, promo_code)

async def ask_for_discount(message, state, promo_code):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await state.update_data(promo_code=promo_code)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω –∫–æ–¥: <code>{promo_code}</code>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–æ—Ç 1 –¥–æ 100):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="10%", callback_data="discount_10")],
            [types.InlineKeyboardButton(text="20%", callback_data="discount_20")],
            [types.InlineKeyboardButton(text="30%", callback_data="discount_30")],
            [types.InlineKeyboardButton(text="50%", callback_data="discount_50")],
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_promos")]
        ]),
        parse_mode="HTML"
    )
    
    await state.set_state(PromoStates.waiting_for_discount)

@router.callback_query(lambda c: c.data.startswith("discount_"), PromoStates.waiting_for_discount)
async def process_discount_button(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –∏–∑ callback data
    discount = int(callback.data.split("_")[1])
    
    await process_discount_value(callback.message, state, discount)
    await callback.answer()

@router.message(PromoStates.waiting_for_discount)
async def process_discount_message(message: types.Message, state: FSMContext):
    try:
        discount = float(message.text.strip().replace(',', '.'))
        
        if discount <= 0 or discount > 100:
            await message.answer("‚ùå –°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        await process_discount_value(message, state, discount)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def process_discount_value(message, state, discount):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
    await state.update_data(discount=discount)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    await message.answer(
        f"–°–∫–∏–¥–∫–∞: {discount}%\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="expiration_1")],
            [types.InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è", callback_data="expiration_7")],
            [types.InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="expiration_30")],
            [types.InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞", callback_data="expiration_90")],
            [types.InlineKeyboardButton(text="–ë–µ—Å—Å—Ä–æ—á–Ω–æ", callback_data="expiration_0")],
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_promos")]
        ])
    )
    
    await state.set_state(PromoStates.waiting_for_expiration)

@router.callback_query(lambda c: c.data.startswith("expiration_"), PromoStates.waiting_for_expiration)
async def process_expiration(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö
    days = int(callback.data.split("_")[1])
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    if days > 0:
        expiration_date = datetime.now() + timedelta(days=days)
        expiration_str = expiration_date.strftime("%d.%m.%Y %H:%M")
    else:
        expiration_date = None
        expiration_str = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
    await state.update_data(expiration_date=expiration_date)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    await callback.message.edit_text(
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiration_str}\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="1 —Ä–∞–∑", callback_data="limit_1")],
            [types.InlineKeyboardButton(text="5 —Ä–∞–∑", callback_data="limit_5")],
            [types.InlineKeyboardButton(text="10 —Ä–∞–∑", callback_data="limit_10")],
            [types.InlineKeyboardButton(text="100 —Ä–∞–∑", callback_data="limit_100")],
            [types.InlineKeyboardButton(text="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="limit_0")],
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_promos")]
        ])
    )
    
    await state.set_state(PromoStates.waiting_for_limit)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("limit_"), PromoStates.waiting_for_limit)
async def process_limit(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    limit = int(callback.data.split("_")[1])
    
    await process_limit_value(callback.message, state, limit)
    await callback.answer()

@router.message(PromoStates.waiting_for_limit)
async def process_limit_message(message: types.Message, state: FSMContext):
    try:
        limit = int(message.text.strip())
        
        if limit < 0:
            await message.answer("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        await process_limit_value(message, state, limit)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def process_limit_value(message, state, limit):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    await state.update_data(usage_limit=limit if limit > 0 else None)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    user_data = await state.get_data()
    promo_code = user_data.get("promo_code")
    discount = user_data.get("discount")
    expiration_date = user_data.get("expiration_date")
    usage_limit = user_data.get("usage_limit")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    expiration_str = expiration_date.strftime("%d.%m.%Y %H:%M") if expiration_date else "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
    limit_str = str(usage_limit) if usage_limit else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await message.answer(
        f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
        f"–ö–æ–¥: <code>{promo_code}</code>\n"
        f"–°–∫–∏–¥–∫–∞: {discount}%\n"
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiration_str}\n"
        f"–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {limit_str}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="confirm_create_promo")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_promos")]
        ]),
        parse_mode="HTML"
    )
    
    await state.set_state(PromoStates.waiting_for_confirmation)

@router.callback_query(lambda c: c.data == "confirm_create_promo", PromoStates.waiting_for_confirmation)
async def create_promo(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    promo_code = user_data.get("promo_code")
    discount = user_data.get("discount")
    expiration_date = user_data.get("expiration_date")
    usage_limit = user_data.get("usage_limit")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ë–î
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
            result = await session.execute(select(Promo).where(Promo.code == promo_code))
            existing_promo = result.scalar_one_or_none()
            
            if existing_promo:
                await callback.message.edit_text(
                    f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    parse_mode="HTML"
                )
                await state.clear()
                await callback.answer()
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
            new_promo = Promo(
                code=promo_code,
                discount=Decimal(str(discount)),
                expiration_date=expiration_date,
                usage_limit=usage_limit,
                used_count=0,
                is_active=True
            )
            
            session.add(new_promo)
            await session.commit()
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await callback.message.edit_text(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–°–∫–∏–¥–∫–∞: {discount}%\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiration_date.strftime('%d.%m.%Y %H:%M') if expiration_date else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n"
                f"–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {usage_limit if usage_limit else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="admin_promos")],
                    [types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
                ]),
                parse_mode="HTML"
            )
            
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.id} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="admin_promos")],
                [types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
            ])
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.callback_query(lambda c: c.data.startswith("delete_promo_"))
async def delete_promo(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    promo_id = int(callback.data.split("_")[2])
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            result = await session.execute(select(Promo).where(Promo.id == promo_id))
            promo = result.scalar_one_or_none()
            
            if not promo:
                await callback.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–µ —É–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏)
            promo.is_active = False
            await session.commit()
            
            await callback.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo.code} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            text, markup = await paginate_results(get_promos, 1, 5, format_promos)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            if markup:
                markup.inline_keyboard.insert(0, [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo")])
            
            await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    dp.include_router(router)