from aiogram import Router, types, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import uuid
import logging
from bot.services.vpn_service import VPNService
from bot.utils.db import async_session
from bot.models.client import Client
from bot.models.user import User
from sqlalchemy import select
from bot.keyboards.instruction_kb import get_instruction_keyboard
from bot.keyboards.user_menu_kb import get_user_menu_keyboard
from bot.keyboards.subscription_kb import get_tariffs_info, get_tariffs_keyboard, get_payment_keyboard, TARIFFS

router = Router()
vpn_service = VPNService()
logger = logging.getLogger(__name__)

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_config")]
        ]
    )
    
    await message.answer(
        "‚ö´ ftw.VPN ‚Äî –≤–∞—à–∞ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∏—Ä–µ.\n\n"
        "üîí –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "üåê –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.\n\n"
        "‚ö° –†–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ—Å—å –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–Ω–∏.",
        reply_markup=keyboard
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
def format_client_info(client):
    return (
        f"üë§ –ò–º—è –≤ —Å–µ—Ç–∏: {client.email}\n"
        f"üì± –õ–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {client.limit_ip}"
    )

@router.callback_query(lambda c: c.data == "get_config")
async def process_get_config(callback: types.CallbackQuery):
    try:
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            result = await session.execute(
                select(User).where(User.tg_id == callback.from_user.id)
            )
            user = result.scalar_one_or_none()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
            if not user:
                user = User(
                    tg_id=callback.from_user.id,
                    username=callback.from_user.username or "none"
                )
                session.add(user)
                await session.commit()
                await session.refresh(user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            client_result = await session.execute(
                select(Client).where(Client.user_id == user.id)
            )
            existing_client = client_result.scalar_one_or_none()
            
            if existing_client:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥
                await callback.message.answer(
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN –∫–æ–Ω—Ñ–∏–≥.\n\n{format_client_info(existing_client)}"
                )
                await callback.answer()
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
            user_uuid = str(uuid.uuid4())
            nickname = f"user_{callback.from_user.id}"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            limit_ip = 3
            traffic_limit = 2 * 1024 * 1024 * 1024  # 2 –ì–ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø–æ–ª—É—á–∞–µ–º URL
            success, vpn_url = await vpn_service.create_config(
                nickname=nickname,
                user_uuid=user_uuid,
                traffic_limit=traffic_limit,
                limit_ip=limit_ip
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            client = Client(
                user_id=user.id,
                email=nickname,
                uuid=user_uuid,
                limit_ip=limit_ip,
                total_traffic=traffic_limit,
                is_active=True,
                config_data=vpn_url,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–æ–Ω—Ñ–∏–≥–∞
                tariff_id=0  # –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ ftw.none –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            )
            session.add(client)
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –ò —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
            await callback.message.answer(
                f"‚úÖ VPN —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
                f"{format_client_info(client)}\n\n"
                f"üî¥ üî¥ üî¥ <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> üî¥ üî¥ üî¥\n"
                f"<b>–ë–ï–°–ü–õ–ê–¢–ù–´–ô –¢–ê–†–ò–§ –û–ì–†–ê–ù–ò–ß–ï–ù –í–°–ï–ì–û 2 –ì–ë –¢–†–ê–§–ò–ö–ê!</b>\n"
                f"<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –ª–∏–º–∏—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ</i>\n\n"
                f"üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{vpn_url}</code>",
                parse_mode="HTML",
                reply_markup=get_user_menu_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            await callback.message.answer(
                "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ ftw.VPN:",
                reply_markup=get_instruction_keyboard()
            )
    
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ø–æ –µ–≥–æ ID
def get_tariff_name_by_id(tariff_id):
    if tariff_id == 0:
        return "ftw.none"
    elif tariff_id == 1:
        return "ftw.base"
    elif tariff_id == 2:
        return "ftw.middle"
    elif tariff_id == 3:
        return "ftw.unlimited"
    else:
        return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ callback_data
@router.message(lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def process_profile(message: types.Message):
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = await session.execute(
                select(User).where(User.tg_id == message.from_user.id)
            )
            user = user_query.scalar_one_or_none()
            
            if not user:
                await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            client_query = await session.execute(
                select(Client).where(Client.user_id == user.id)
            )
            client = client_query.scalar_one_or_none()
            
            if not client:
                await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ 'üíº –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞' –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞.")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            expiry_date = "‚ôæÔ∏è –ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"
            if client.expiry_time:
                expiry_date = client.expiry_time.strftime("%d.%m.%Y %H:%M")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
            tariff_name = get_tariff_name_by_id(client.tariff_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            warning_text = ""
            if client.tariff_id == 0 and client.total_traffic == 2 * 1024 * 1024 * 1024:
                warning_text = "\n\n‚ö†Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 2 –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_text = (
                f"<b>‚ö´ ftw.VPN</b>\n\n"
                f"<b>üÜî Telegram ID:</b> {message.from_user.id}\n"
                f"<b>üìã –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:</b> {tariff_name}\n"
                f"<b>‚è±Ô∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expiry_date}"
                f"{warning_text}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if client.config_data:
                profile_text += f"\n\n<b>üîê –í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n<code>{client.config_data}</code>"
            else:
                profile_text += "\n\n‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            
            await message.answer(profile_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "üíº –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞")
async def show_subscription_info(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    await message.answer(
        get_tariffs_info(),
        reply_markup=get_tariffs_keyboard()
    )

@router.callback_query(lambda c: c.data == "pay_bonus")
async def process_bonus_payment(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üíé –û–ø–ª–∞—Ç–∞ —Å –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±—Ä–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å..."
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    # ...
    await callback.answer()

@router.callback_query(lambda c: c.data == "pay_card")
async def process_card_payment(callback: types.CallbackQuery):
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
    await callback.message.edit_text(
        get_tariffs_info(),
        reply_markup=get_tariffs_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(lambda c: c.data == "back_to_tariffs")
async def back_to_tariffs(callback: types.CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤
    await callback.message.edit_text(
        get_tariffs_info(),
        reply_markup=get_tariffs_keyboard()
    )
    await callback.answer()

@router.message(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def show_info(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    await message.answer(
        "‚ÑπÔ∏è <b>–û —Å–µ—Ä–≤–∏—Å–µ ftw.VPN</b>\n\n"
        "üîí <b>–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å</b>\n"
        "–ù–∏–∫–∞–∫–æ–π –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö, –Ω–µ—Ç –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        "‚ö° <b>–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</b>\n"
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n"
        "üîê <b>–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n"
        "–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞\n\n"
        "üì± <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b>\n"
        "–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö\n\n"
        "üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞ 24/7(@qaserd_ll)\n\n"
        "ftw.VPN ‚Äî –≤–∞—à–∞ –Ω–∞–¥—ë–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ",
        parse_mode="HTML"
    )

@router.message(lambda message: message.text == "üéÅ –ë–æ–Ω—É—Å—ã")
async def show_bonuses(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–∞—Ö
    await message.answer(
        "üîú –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
    )

def register_handlers(dp: Dispatcher):
    dp.include_router(router)
