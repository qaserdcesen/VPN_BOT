import logging
from datetime import datetime, timedelta
import uuid
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.future import select
from bot.utils.db import async_session
from bot.models.payment import Payment as PaymentModel
from bot.models.user import User
from bot.models.plan import Plan
from bot.models.client import Client
from bot.config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, PAYMENT_RETURN_URL
from bot.keyboards.subscription_kb import TARIFFS
from bot.services.vpn_service import VPNService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü–æ—á—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_EMAIL = "qaserd@gmail.com"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ YooKassa
yookassa_available = False
yookassa_configured = False
TEST_MODE = False  # –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ YooKassa

try:
    import yookassa
    from yookassa import Configuration, Payment
    yookassa_available = True
    logger.info("YooKassa module imported successfully")
except ImportError:
    logger.warning("YooKassa module not found. Using mock implementation.")
    
    # Mock classes for YooKassa
    class Configuration:
        account_id = None
        secret_key = None
        
        @staticmethod
        def configure(*args, **kwargs):
            logger.error("YooKassa module not available. Cannot configure.")
    
    class Payment:
        @staticmethod
        def create(*args, **kwargs):
            logger.error("YooKassa module not available. Cannot create payment.")
            return None
        
        @staticmethod
        def cancel(*args, **kwargs):
            logger.error("YooKassa module not available. Cannot cancel payment.")
            return None
        
        @staticmethod
        def find_one(*args, **kwargs):
            logger.error("YooKassa module not available. Cannot find payment.")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa
try:
    if yookassa_available and YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa —Å ID –º–∞–≥–∞–∑–∏–Ω–∞: {YOOKASSA_SHOP_ID}")
        Configuration.account_id = YOOKASSA_SHOP_ID
        Configuration.secret_key = YOOKASSA_SECRET_KEY
        logger.info("YooKassa initialized successfully")
        yookassa_configured = True
    else:
        yookassa_configured = False
        if not yookassa_available:
            logger.warning("YooKassa –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        elif not (YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY):
            logger.warning("YooKassa –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
except Exception as e:
    yookassa_configured = False
    logger.error(f"YooKassa initialization error: {e}")

class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ YooKassa"""
    
    @staticmethod
    async def get_plan_by_tariff(tariff_key: str) -> Plan:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω –ø–æ –∫–ª—é—á—É —Ç–∞—Ä–∏—Ñ–∞"""
        async with async_session() as session:
            tariff_info = TARIFFS.get(tariff_key)
            if not tariff_info:
                raise ValueError(f"–¢–∞—Ä–∏—Ñ {tariff_key} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω –≤ –ë–î
            plan_query = await session.execute(
                select(Plan).where(Plan.title == tariff_info["name"])
            )
            plan = plan_query.scalar_one_or_none()
            
            if not plan:
                logger.warning(f"–ü–ª–∞–Ω –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff_key} ({tariff_info['name']}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                raise ValueError(f"–ü–ª–∞–Ω –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            return plan
    
    @staticmethod
    async def create_payment(user_id: int, tariff_key: str, contact: str = None):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ YooKassa –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tariff_key: –ö–ª—é—á —Ç–∞—Ä–∏—Ñ–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "base", "middle", "unlimited")
            contact: Email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —á–µ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            tuple: (payment_id, payment_url, markup) –∏–ª–∏ (None, None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with async_session() as session:
                user_query = await session.execute(
                    select(User).where(User.tg_id == user_id)
                )
                user = user_query.scalar_one_or_none()
                
                if not user:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return None, None, None
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ —Ç–∞—Ä–∏—Ñ—É
                plan = await PaymentService.get_plan_by_tariff(tariff_key)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –µ—Å–ª–∏ YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
                if TEST_MODE or not yookassa_configured:
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
                    payment_id = f"test_payment_{uuid.uuid4()}"
                    payment_url = "https://example.com/test-payment"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
                    db_payment = PaymentModel(
                        user_id=user.id,
                        plan_id=plan.id,
                        status="pending",
                        amount=plan.price,
                        payment_id=payment_id
                    )
                    session.add(db_payment)
                    await session.commit()
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    markup = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=f"test_success_{payment_id}")],
                            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment_id}")],
                        ]
                    )
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ: {tariff_key}")
                    return payment_id, payment_url, markup
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
                tariff_info = TARIFFS.get(tariff_key)
                payment_data = {
                    "amount": {
                        "value": str(plan.price),
                        "currency": "RUB"
                    },
                    "confirmation": {
                        "type": "redirect",
                        "return_url": PAYMENT_RETURN_URL
                    },
                    "capture": True,
                    "description": f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_info['name']}",
                    "metadata": {
                        "tg_user_id": user_id,
                        "tariff": tariff_key,
                        "db_user_id": user.id,
                        "plan_id": plan.id
                    }
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç
                if contact:
                    if '@' in contact:
                        contact_type = "email"
                    else:
                        contact_type = "phone"
                        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä)
                        contact = ''.join(filter(str.isdigit, contact))
                    
                    payment_data["receipt"] = {
                        "customer": {
                            contact_type: contact
                        },
                        "items": [
                            {
                                "description": f"–¢–∞—Ä–∏—Ñ {tariff_info['name']}",
                                "quantity": "1.00",
                                "amount": {
                                    "value": str(plan.price),
                                    "currency": "RUB"
                                },
                                "vat_code": "1",
                                "payment_mode": "full_prepayment",
                                "payment_subject": "service"
                            }
                        ]
                    }
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
                payment = Payment.create(payment_data)
                payment_id = payment.id
                payment_url = payment.confirmation.confirmation_url
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
                db_payment = PaymentModel(
                    user_id=user.id,
                    plan_id=plan.id,
                    status="pending",
                    amount=plan.price,
                    payment_id=payment_id
                )
                session.add(db_payment)
                await session.commit()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                markup = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment_id}")],
                    ]
                )
                
                logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ: {tariff_key}")
                return payment_id, payment_url, markup
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None, None, None
    
    @staticmethod
    async def cancel_payment(payment_id: str):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ YooKassa –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            if payment_id.startswith("test_payment_"):
                async with async_session() as session:
                    payment_query = await session.execute(
                        select(PaymentModel).where(PaymentModel.payment_id == payment_id)
                    )
                    db_payment = payment_query.scalar_one_or_none()
                    
                    if db_payment:
                        db_payment.status = "canceled"
                        await session.commit()
                        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω")
                        return True
                    
                    return False
            
            # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ YooKassa
            if yookassa_configured:
                try:
                    # –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞)
                    Payment.cancel(payment_id)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ YooKassa: {e}")
            
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            async with async_session() as session:
                payment_query = await session.execute(
                    select(PaymentModel).where(PaymentModel.payment_id == payment_id)
                )
                db_payment = payment_query.scalar_one_or_none()
                
                if db_payment:
                    db_payment.status = "canceled"
                    await session.commit()
                    logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω –≤ –ë–î")
                    return True
                
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return False
    
    @staticmethod
    async def process_test_payment(payment_id: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
        
        Args:
            payment_id: ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        """
        try:
            async with async_session() as session:
                payment_query = await session.execute(
                    select(PaymentModel).where(PaymentModel.payment_id == payment_id)
                )
                db_payment = payment_query.scalar_one_or_none()
                
                if not db_payment:
                    logger.warning(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return False
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å succeeded –∏ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã
                old_status = db_payment.status
                db_payment.status = "succeeded"
                db_payment.paid_at = datetime.now()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                plan_query = await session.execute(
                    select(Plan).where(Plan.id == db_payment.plan_id)
                )
                plan = plan_query.scalar_one_or_none()
                
                if plan:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∞—Ä–∏—Ñ–æ–º
                    await PaymentService.update_client_after_payment(session, db_payment.user_id, plan)
                else:
                    logger.warning(f"–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                
                await session.commit()
                
                logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å {old_status} –Ω–∞ succeeded")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return False
    
    @staticmethod
    async def process_notification(payment_data: dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç YooKassa
        
        Args:
            payment_data: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç YooKassa
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            event = payment_data.get("event")
            payment = payment_data.get("object")
            
            if not event or not payment:
                logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç event –∏–ª–∏ object")
                return False
                
            payment_id = payment.get("id")
            status = payment.get("status")
            paid = payment.get("paid", False)
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: event={event}, payment_id={payment_id}, status={status}, paid={paid}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –∏ —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ pending
            if "payment" not in event:
                logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event}")
                return False
                
            # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with async_session() as session:
                payment_query = await session.execute(
                    select(PaymentModel).where(PaymentModel.payment_id == payment_id)
                )
                db_payment = payment_query.scalar_one_or_none()
                
                if not db_payment:
                    logger.warning(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return False
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                old_status = db_payment.status
                db_payment.status = status
                
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã
                if status == "succeeded" and paid:
                    db_payment.paid_at = datetime.now()
                    logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å {old_status} –Ω–∞ {status}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                    plan_query = await session.execute(
                        select(Plan).where(Plan.id == db_payment.plan_id)
                    )
                    plan = plan_query.scalar_one_or_none()
                    
                    if plan:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∞—Ä–∏—Ñ–æ–º
                        await PaymentService.update_client_after_payment(session, db_payment.user_id, plan)
                    else:
                        logger.warning(f"–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ API YooKassa –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    if yookassa_configured:
                        try:
                            payment_info = Payment.find_one(payment_id)
                            if payment_info and payment_info.status == "succeeded" and payment_info.paid:
                                logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API: –ø–ª–∞—Ç–µ–∂ {payment_id} –≤ —Å—Ç–∞—Ç—É—Å–µ succeeded –∏ –æ–ø–ª–∞—á–µ–Ω")
                            else:
                                logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö: webhook={status}/{paid}, API={payment_info.status if payment_info else 'None'}/{payment_info.paid if payment_info else 'None'}")
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API: {e}")
                else:
                    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –∏–∑–º–µ–Ω–µ–Ω —Å {old_status} –Ω–∞ {status}, paid={paid}")
                
                await session.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç YooKassa: {e}")
            return False
            
    @staticmethod
    async def check_payments(bot):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ API YooKassa –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –≤ –ë–î
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        try:
            if not yookassa_configured:
                logger.warning("YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π")
                return

            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
            async with async_session() as session:
                payment_query = await session.execute(
                    select(PaymentModel).where(PaymentModel.status == "pending")
                )
                pending_payments = payment_query.scalars().all()
                
                if not pending_payments:
                    logger.info("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ pending")
                    return
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ pending")
                
                for db_payment in pending_payments:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ YooKassa
                        payment_info = Payment.find_one(db_payment.payment_id)
                        
                        if not payment_info:
                            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {db_payment.payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ YooKassa")
                            continue
                        
                        logger.info(f"–ü–ª–∞—Ç–µ–∂ {db_payment.payment_id}: –°—Ç–∞—Ç—É—Å –≤ YooKassa - {payment_info.status}, –°—Ç–∞—Ç—É—Å –≤ –ë–î - {db_payment.status}")
                        
                        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                        if payment_info.status != db_payment.status:
                            old_status = db_payment.status
                            db_payment.status = payment_info.status
                            
                            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                            if payment_info.status == "succeeded" and payment_info.paid:
                                db_payment.paid_at = datetime.now()
                                logger.info(f"–ü–ª–∞—Ç–µ–∂ {db_payment.payment_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å {old_status} –Ω–∞ {payment_info.status}")
                                
                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                user_query = await session.execute(
                                    select(User).where(User.id == db_payment.user_id)
                                )
                                user = user_query.scalar_one_or_none()
                                
                                if user:
                                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
                                    plan_query = await session.execute(
                                        select(Plan).where(Plan.id == db_payment.plan_id)
                                    )
                                    plan = plan_query.scalar_one_or_none()
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∞—Ä–∏—Ñ–æ–º
                                    await PaymentService.update_client_after_payment(session, user.id, plan)
                                    
                                    plan_info = f"¬´{plan.title}¬ª" if plan else ""
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                    try:
                                        await bot.send_message(
                                            user.tg_id,
                                            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                                            f"–í–∞—à —Ç–∞—Ä–∏—Ñ {plan_info} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
                                            f"–°—É–º–º–∞: {db_payment.amount} ‚ÇΩ"
                                        )
                                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id} –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ")
                                    except Exception as e:
                                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")
                            
                            elif payment_info.status == "canceled":
                                logger.info(f"–ü–ª–∞—Ç–µ–∂ {db_payment.payment_id} –æ—Ç–º–µ–Ω–µ–Ω. –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å {old_status} –Ω–∞ {payment_info.status}")
                            
                            await session.commit()
                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {db_payment.payment_id}: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            
    @staticmethod
    async def update_client_after_payment(session, user_id, plan):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        
        Args:
            session: –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            plan: –û–±—ä–µ–∫—Ç –ø–ª–∞–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞—Ä–∏—Ñ–µ
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            client_query = await session.execute(
                select(Client).where(Client.user_id == user_id)
            )
            client = client_query.scalar_one_or_none()
            
            if not client:
                logger.warning(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç IP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
            limit_ip = 3  # –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç
            
            if "unlimited" in plan.title.lower():
                limit_ip = 6  # –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ 6 IP
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client.total_traffic = plan.traffic_limit  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –ø–ª–∞–Ω–∞
            client.limit_ip = limit_ip  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç IP
            client.is_active = True  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (30 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
            client.expiry_time = datetime.now() + timedelta(days=plan.duration_days)
            
            logger.info(f"–ö–ª–∏–µ–Ω—Ç (user_id={user_id}) –æ–±–Ω–æ–≤–ª–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É {plan.title}: "
                        f"–ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞={plan.traffic_limit}, –ª–∏–º–∏—Ç IP={limit_ip}, "
                        f"—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ {client.expiry_time}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ update_client_on_server –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            vpn_service = VPNService()
            expiry_timestamp = int(client.expiry_time.timestamp() * 1000) if client.expiry_time else 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ VPN
            update_result = await vpn_service.update_client_on_server(
                user_uuid=client.uuid,
                nickname=client.email,
                traffic_limit=client.total_traffic,
                limit_ip=client.limit_ip,
                expiry_time=expiry_timestamp
            )
            
            if update_result:
                logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.email} ({client.uuid}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ VPN —Å–µ—Ä–≤–µ—Ä–µ")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.email} ({client.uuid}) –Ω–∞ VPN —Å–µ—Ä–≤–µ—Ä–µ")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è user_id={user_id}: {e}")
            return False
    
    @staticmethod
    async def start_payment_checker(bot, check_interval=60):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥)
        """
        import asyncio
        
        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ {check_interval} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                await PaymentService.check_payments(bot)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            
            await asyncio.sleep(check_interval) 