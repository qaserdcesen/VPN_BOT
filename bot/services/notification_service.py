import logging
import asyncio
from datetime import datetime, timedelta
from sqlalchemy import select
from aiogram import Bot
from bot.utils.db import async_session
from bot.models.client import Client
from bot.models.user import User

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""

    @staticmethod
    async def check_expiring_subscriptions(bot):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        try:
            async with async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É "–∑–∞–≤—Ç—Ä–∞"
                now = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                tomorrow = now + timedelta(days=1)
                today_end = now.replace(hour=23, minute=59, second=59)
                tomorrow_end = tomorrow.replace(hour=23, minute=59, second=59)
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
                # –∏ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                query = select(Client).join(User).where(
                    (
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è
                        ((Client.expiry_time >= now) & (Client.expiry_time <= today_end)) |
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞
                        ((Client.expiry_time >= tomorrow) & (Client.expiry_time <= tomorrow_end))
                    ) &
                    (Client.is_active == True) &
                    (Client.tg_notified == False)
                )
                
                result = await session.execute(query)
                clients = result.scalars().all()
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")
                
                for client in clients:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = client.user
                    
                    if not user:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.id}")
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞
                    expiry_date = client.expiry_time.date()
                    today_date = now.date()
                    expires_today = expiry_date == today_date
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    sent = await NotificationService._send_notification(
                        bot, 
                        user.tg_id, 
                        client.expiry_time, 
                        expires_today
                    )
                    
                    if sent:
                        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        client.tg_notified = True
                        await session.commit()
                        
                        days_left = "—Å–µ–≥–æ–¥–Ω—è" if expires_today else "–∑–∞–≤—Ç—Ä–∞"
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id} –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {days_left}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    @staticmethod
    async def reset_notification_flags():
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        """
        try:
            logger.info("–°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
            
            async with async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É —á–µ—Ä–µ–∑ 3 –¥–Ω—è
                now = datetime.now()
                future_date = now + timedelta(days=3)
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ñ–ª–∞–≥–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –±–æ–ª–µ–µ 3 –¥–Ω–µ–π
                # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                query = select(Client).where(
                    (Client.expiry_time > future_date) &  # –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ (–∏—Å—Ç–µ–∫–∞–µ—Ç –Ω–µ —Å–∫–æ—Ä–æ)
                    (Client.tg_notified == True) &        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    (Client.is_active == True)            # –ö–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                )
                
                result = await session.execute(query)
                clients = result.scalars().all()
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")
                
                for client in clients:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    client.tg_notified = False
                
                if clients:
                    await session.commit()
                    logger.info(f"–°–±—Ä–æ—à–µ–Ω—ã —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–ª–∞–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    @staticmethod
    async def _send_notification(bot: Bot, user_id: int, expiry_time: datetime, is_today: bool):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expiry_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            is_today: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è, False –µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            formatted_date = expiry_time.strftime("%d.%m.%Y")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if is_today:
                message_text = (
                    f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
                    f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è - {formatted_date}.\n\n"
                    f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤—ã–±–µ—Ä–∏—Ç–µ 'üíº –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞' –≤ –º–µ–Ω—é –±–æ—Ç–∞."
                )
            else:
                message_text = (
                    f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
                    f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ - {formatted_date}.\n\n"
                    f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤—ã–±–µ—Ä–∏—Ç–µ 'üíº –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞' –≤ –º–µ–Ω—é –±–æ—Ç–∞."
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=user_id,
                text=message_text
            )
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

    @staticmethod
    async def start_notification_checker(bot, check_interval=3600):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ check_interval —Å–µ–∫—É–Ω–¥
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1 —á–∞—Å)
        """
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ {check_interval} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                await NotificationService.check_expiring_subscriptions(bot)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                await NotificationService.reset_notification_flags()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(check_interval) 