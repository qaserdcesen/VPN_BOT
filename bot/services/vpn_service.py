import json
import aiohttp
import os
from bot.config import API_BASE_URL, INBOUND_ID, API_USERNAME, API_PASSWORD, COOKIES_FILE
from yarl import URL
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class VPNSettings:
    def __init__(self, 
                 host="qaserdcesen.minecraftnoob.com",
                 port=443,
                 type="tcp",
                 security="reality",
                 pbk="LtGGe_WR1PR3JdlvdEcURLVimtOl9_EERwt_kPT8mRk",
                 fp="chrome",
                 sni="google.com",
                 sid="9c15e6373b6177e9",
                 spx="/",
                 flow="xtls-rprx-vision"):
        self.host = host
        self.port = port
        self.type = type
        self.security = security
        self.pbk = pbk
        self.fp = fp
        self.sni = sni
        self.sid = sid
        self.spx = spx
        self.flow = flow

class VPNService:
    def __init__(self):
        self.base_url = API_BASE_URL.rstrip('/')
        self.username = API_USERNAME
        self.password = API_PASSWORD
        self.inbound_id = int(INBOUND_ID)
        self.cookies_file = COOKIES_FILE
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è cookies –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(self.cookies_file), exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL
        self.vpn_settings = VPNSettings()
        
    def _load_cookies(self):
        try:
            if os.path.exists(self.cookies_file) and os.path.getsize(self.cookies_file) > 0:
                with open(self.cookies_file, 'r') as f:
                    return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            pass
        return None
        
    def _save_cookies(self, cookies):
        os.makedirs(os.path.dirname(self.cookies_file), exist_ok=True)
        with open(self.cookies_file, 'w') as f:
            json.dump(cookies, f)

    def _update_cookie_jar(self, cookie_jar, cookies_dict):
        if cookies_dict:
            for name, cookie in cookies_dict.items():
                cookie_jar.update_cookies({name: cookie})

    def generate_vpn_url(self, user_uuid, nickname):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è VPN-–∫–ª–∏–µ–Ω—Ç–∞"""
        # URL-encode –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ spx
        spx_encoded = self.vpn_settings.spx.replace("/", "%2F")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        url = (
            f"vless://{user_uuid}@{self.vpn_settings.host}:{self.vpn_settings.port}"
            f"?type={self.vpn_settings.type}"
            f"&security={self.vpn_settings.security}"
            f"&pbk={self.vpn_settings.pbk}"
            f"&fp={self.vpn_settings.fp}"
            f"&sni={self.vpn_settings.sni}"
            f"&sid={self.vpn_settings.sid}"
            f"&spx={spx_encoded}"
            f"&flow={self.vpn_settings.flow}"
            f"#{nickname}"
        )
        
        return url
    
    def update_vpn_settings(self, settings):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN"""
        self.vpn_settings = settings

    # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN
    async def create_config(self, nickname: str, user_uuid: str, traffic_limit=None, limit_ip=3) -> tuple[bool, str]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
        
        Args:
            nickname: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è VPN
            user_uuid: UUID –∫–ª–∏–µ–Ω—Ç–∞
            traffic_limit: –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö (0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞)
            limit_ip: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            
        Returns:
            tuple: (success, vpn_url)
        """
        cookie_jar = aiohttp.CookieJar(unsafe=True)
        saved_cookies = self._load_cookies()
        if saved_cookies:
            self._update_cookie_jar(cookie_jar, saved_cookies)
            print("üîπ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏.")

        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        # –ï—Å–ª–∏ —Ç—Ä–∞—Ñ–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 2GB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if traffic_limit is None:
            traffic_limit = 2 * 1024 * 1024 * 1024

        async with aiohttp.ClientSession(cookie_jar=cookie_jar) as session:
            need_auth = not saved_cookies
            if need_auth:
                login_url = f"{self.base_url}/login"
                login_data = {"username": self.username, "password": self.password}
                print("\nüîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                async with session.post(login_url, json=login_data, headers=headers) as response:
                    login_response_text = await response.text()
                    print("üîπ –°—Ç–∞—Ç—É—Å-–∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", response.status)
                    print("üîπ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", login_response_text)
                    if response.status != 200:
                        raise Exception("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
                cookies = session.cookie_jar.filter_cookies(URL(self.base_url))
                cookies_dict = {key: morsel.value for key, morsel in cookies.items()}
                self._save_cookies(cookies_dict)
                print("üîπ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            else:
                print("üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_data = {
                "id": int(self.inbound_id),
                "settings": json.dumps({
                    "clients": [{
                        "id": user_uuid,
                        "flow": "xtls-rprx-vision",
                        "email": nickname,
                        "limitIp": limit_ip,
                        "totalGB": traffic_limit,
                        "expiryTime": 0,
                        "enable": True,
                        "tgId": "",
                        "subId": "test-sub-id",
                        "reset": 0
                    }]
                })
            }

            add_client_url = f"{self.base_url}/panel/api/inbounds/addClient"
            async with session.post(add_client_url, headers=headers, json=client_data) as response:
                client_response_text = await response.text()
                print("\nüîπ –°—Ç–∞—Ç—É—Å-–∫–æ–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:", response.status)
                print("üîπ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", client_response_text)
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {client_response_text}")
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} ({user_uuid}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL
            vpn_url = self.generate_vpn_url(user_uuid, nickname)
            return True, vpn_url
    
    async def update_client_on_server(self, user_uuid: str, nickname: str, traffic_limit: int, 
                                     limit_ip: int, expiry_time: int = 0) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ VPN —Å–µ—Ä–≤–µ—Ä–µ
        
        Args:
            user_uuid: UUID –∫–ª–∏–µ–Ω—Ç–∞
            nickname: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            traffic_limit: –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö (0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞)
            limit_ip: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            expiry_time: –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (0 - –±–µ—Å—Å—Ä–æ—á–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            cookie_jar = aiohttp.CookieJar(unsafe=True)
            saved_cookies = self._load_cookies()
            if saved_cookies:
                self._update_cookie_jar(cookie_jar, saved_cookies)
                logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.")

            headers = {"Accept": "application/json"}

            async with aiohttp.ClientSession(cookie_jar=cookie_jar) as session:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                need_auth = not saved_cookies
                if need_auth:
                    login_url = f"{self.base_url}/login"
                    login_data = {"username": self.username, "password": self.password}
                    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")
                    async with session.post(login_url, json=login_data, headers=headers) as response:
                        login_response_text = await response.text()
                        logger.info(f"–°—Ç–∞—Ç—É—Å-–∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status}")
                        logger.debug(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {login_response_text}")
                        if response.status != 200:
                            raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
                    cookies = session.cookie_jar.filter_cookies(URL(self.base_url))
                    cookies_dict = {key: morsel.value for key, morsel in cookies.items()}
                    self._save_cookies(cookies_dict)
                    logger.info("–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                else:
                    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                client_data = {
                    "id": int(self.inbound_id),
                    "settings": json.dumps({
                        "clients": [{
                            "id": user_uuid,
                            "flow": "xtls-rprx-vision",
                            "email": nickname,
                            "limitIp": limit_ip,
                            "totalGB": traffic_limit,
                            "expiryTime": expiry_time,
                            "enable": True,
                            "tgId": "",
                            "subId": "test-sub-id",
                            "reset": 0
                        }]
                    })
                }

                update_client_url = f"{self.base_url}/panel/api/inbounds/updateClient/{user_uuid}"
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {nickname} ({user_uuid})")
                logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {client_data}")
                logger.info(f"URL –∑–∞–ø—Ä–æ—Å–∞: {update_client_url}")
                
                async with session.post(update_client_url, headers=headers, json=client_data) as response:
                    client_response_text = await response.text()
                    logger.info(f"–°—Ç–∞—Ç—É—Å-–∫–æ–¥ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {response.status}")
                    logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {client_response_text}")
                    
                    if response.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {client_response_text}")
                        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {client_response_text}")
                    
                    logger.info(f"–ö–ª–∏–µ–Ω—Ç {nickname} ({user_uuid}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    return True
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {user_uuid}: {e}")
            return False 